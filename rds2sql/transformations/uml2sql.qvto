import common;

modeltype uml uses uml('http://www.eclipse.org/uml2/4.0.0/UML');
modeltype sql uses genericsql('http://genericsql/1.0');

transformation mysql(in umlModel : uml, out sqlModel : sql);

main() 
{
	umlModel.objects()![Model].map toDataBase();
}

mapping Package::toDataBase() : DataBase
{
	name := self.name;
	tables += self.allSubobjectsOfKind(Class)[Class]->map toTable();
	umlModel.objects()[Association]->map toForeignKeys();
	umlModel.objects()[Association]->map toTable();
}

mapping Class::toTable() : Table
{
	name := self.name;
	primaryKey := self.ownedAttribute->at(1).map toPrimaryKey();
	fields += self.ownedAttribute->map toField();
}

mapping Property::toField() : Field
disjuncts Property::toSizeField, Property::toGeneralField
{}

abstract mapping Property::toCommonField() : Field
{
	name := self.name;
	type := self.translate();
	notNull := self.lower > 0;
	unique := self.isUnique;
}

mapping Property::toGeneralField() : Field
inherits Property::toCommonField
{
}

mapping Property::toSizeField() : Field
inherits Property::toCommonField
when {
	self.type.name = 'String' or self.type.name = 'ByteArray' or self.type.name = 'Char'
}
{
	if (self.type.name = 'Char')
		then { size := 1; }
	else
		{ size := 100; }
	endif;
}

mapping Property::toPrimaryKey() : PrimaryKey
{
	name := self._class.name;
	primaryFields := self.map toField();
}

mapping Association::toPrimaryKey(t : Table, pk1 : Property, pk2 : Property) : PrimaryKey
when
{
	(self.ownedEnd->at(1).upperBound() < 0 and self.ownedEnd->at(1).getOtherEnd().upperBound() < 0)
}
{
	name := t.name;
	table := t;
	primaryFields += pk1.map toField();
	primaryFields += pk2.map toField();
}

mapping Association::toForeignKeys() : ForeignKey
disjuncts
	Association::toForeignKeysOne2One,
	Association::toForeignKeysOne2N
{}

mapping Association::toForeignKeysOne2One() : ForeignKey
when
{
	self.ownedEnd->at(1).upperBound() = 1
	and
	self.ownedEnd->at(1).getOtherEnd().upperBound() = 1
}
{
	var propRef := 
		if(self.ownedEnd->at(1).lowerBound() = 0) then 
			self.ownedEnd->at(2)
		else
			self.ownedEnd->at(1)
		endif;
		
	refersTo :=  propRef.type![Class]->ownedAttribute->at(1).map toPrimaryKey();
	table :=  propRef.getOtherEnd().type![Class].map toTable();
	foreignFields += propRef.map toForeignField(table);
	name := propRef.name;
}

mapping Association::toForeignKeysOne2N() : ForeignKey
when
{
	(self.ownedEnd->at(1).upperBound() = 1 and self.ownedEnd->at(1).getOtherEnd().upperBound() < 0)
	or
	(self.ownedEnd->at(1).upperBound() < 0  and self.ownedEnd->at(1).getOtherEnd().upperBound() = 1)
}
{	
	var propRef := 
		if(self.ownedEnd->at(1).upperBound() < 0) then 
			self.ownedEnd->at(2)
		else
			self.ownedEnd->at(1)
		endif;
	
	refersTo :=  propRef.type![Class]->ownedAttribute->at(1).map toPrimaryKey();
	table :=  propRef.getOtherEnd().type![Class].map toTable();
	foreignFields += propRef.map toForeignField(table);
	name := propRef.name;
}

mapping Association::toForeignKeysN2N(t : Table)
when
{
	(self.ownedEnd->at(1).upperBound() < 0 and self.ownedEnd->at(1).getOtherEnd().upperBound() < 0)
}
{	
	var propRef := self.ownedEnd->at(1);
	
	object ForeignKey
	{
		refersTo :=  propRef.type![Class]->ownedAttribute->at(1).map toPrimaryKey();
		table :=  t;
		foreignFields := propRef.map toForeignField(t);
		name := propRef.name;
	};	
	
	object ForeignKey
	{
		refersTo :=  propRef.getOtherEnd().type![Class]->ownedAttribute->at(1).map toPrimaryKey();
		table :=  t;
		foreignFields := propRef.getOtherEnd().map toForeignField(t);
		name := propRef.getOtherEnd().name;
	}; 
}

mapping Association::toTable() : Table
when
{
	(self.ownedEnd->at(1).upperBound() < 0 and self.ownedEnd->at(1).getOtherEnd().upperBound() < 0)
}
{
	var propRef := self.ownedEnd->at(1);
	var pk1 := propRef.type![Class]->ownedAttribute->at(1);
	var pk2 := propRef.getOtherEnd().type![Class]->ownedAttribute->at(1);
	
	database := umlModel.objects()![Model].map toDataBase();
	name := propRef.type![Class].name + '_' + propRef.getOtherEnd().type![Class].name;
	self.map toPrimaryKey(result, pk1, pk2);
			  
	foreignKeys += self.map toForeignKeysN2N(result);
}


abstract mapping Property::toCommonForeignField(t : Table) : Field
{
	var pk := self.type![Class]->ownedAttribute->at(1).map toPrimaryKey();
		
	name := pk.primaryFields->at(1).name;
	type := pk.primaryFields->at(1).type;
}

mapping Property::toForeignField(t : Table) : Field
inherits Property::toCommonForeignField
{
	if (self.owner![Association].ownedEnd->at(1).upperBound() = 1
		and self.owner![Association].ownedEnd->at(1).getOtherEnd().upperBound() = 1)
		then { notNull := true; unique := true; }
	else
		if (self.owner![Association].ownedEnd->at(1).upperBound() < 0
			and self.owner![Association].ownedEnd->at(1).getOtherEnd().upperBound() < 0)
			then {}
		else
			{ notNull := true; }
		endif
	endif;
	table := t;
}

property typeMap : Dict(String,sql::Type) = 
	Dict {
        'Integer'	= sql::Type::int,
        'Boolean'	= sql::Type::boolean,
        'ByteArray'	= sql::Type::byteArray,
        'Date'		= sql::Type::date,
        'Long'		= sql::Type::bigInt,
        'Real'		= sql::Type::double,
        'String'	= sql::Type::varchar,
        'Char'		= sql::Type::varchar
    };

query TypedElement::translate() : sql::Type
{
	var res := typeMap->get(self.type.name);
	return if (res <> null) then res else sql::Type::undefined endif;
}